```python
class TreeNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

def tree_height(root):
    if root is None:
        return 0
    else:
        left_height = tree_height(root.left)
        right_height = tree_height(root.right)
        
        # Return the height of the taller subtree, plus 1 for the current node
        return max(left_height, right_height) + 1
```

You can use this function with a binary tree created using the `TreeNode` class. For example:

```python
# Example binary tree
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)

# Calculate the height
height = tree_height(root)
print("Height of the binary tree:", height)
```

In this example, the tree looks like:

```
    1
   / \
  2   3
 / \
4   5
```

The output will be:

```
Height of the binary tree: 3
```

The `tree_height` function recursively calculates the height of the binary tree. If the tree is empty (root is `None`), the height is considered 0. Otherwise, it calculates the height of the left and right subtrees and returns the maximum height plus 1 for the current node.
