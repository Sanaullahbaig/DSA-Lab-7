```python
class TreeNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

def preorder_traversal(root):
    result = []
    if root:
        result.append(root.key)
        result.extend(preorder_traversal(root.left))
        result.extend(preorder_traversal(root.right))
    return result

def inorder_traversal(root):
    result = []
    if root:
        result.extend(inorder_traversal(root.left))
        result.append(root.key)
        result.extend(inorder_traversal(root.right))
    return result

def postorder_traversal(root):
    result = []
    if root:
        result.extend(postorder_traversal(root.left))
        result.extend(postorder_traversal(root.right))
        result.append(root.key)
    return result
```

You can use these functions with a binary tree created using the `TreeNode` class. For example:

```python
# Example binary tree
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)

# Perform traversals
preorder_result = preorder_traversal(root)
inorder_result = inorder_traversal(root)
postorder_result = postorder_traversal(root)

print("Preorder Traversal:", preorder_result)
print("Inorder Traversal:", inorder_result)
print("Postorder Traversal:", postorder_result)
```

This will output:

```
Preorder Traversal: [1, 2, 4, 5, 3]
Inorder Traversal: [4, 2, 5, 1, 3]
Postorder Traversal: [4, 5, 2, 3, 1]
```

These traversal functions use recursion to visit nodes in the specified order. Adjust the order of appending to the `result` list based on your specific traversal needs.
