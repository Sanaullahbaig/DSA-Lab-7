```python
class TreeNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

def find_lca(root, node1, node2):
    if root is None:
        return None

    # If the current node is one of the nodes, it is the LCA
    if root.key == node1 or root.key == node2:
        return root

    # Recursively search in the left and right subtrees
    left_lca = find_lca(root.left, node1, node2)
    right_lca = find_lca(root.right, node1, node2)

    # If both nodes are found in different subtrees, the current node is the LCA
    if left_lca and right_lca:
        return root

    # If one node is found, return that node as the LCA
    return left_lca if left_lca else right_lca

# Example usage
root = TreeNode(3)
root.left = TreeNode(5)
root.right = TreeNode(1)
root.left.left = TreeNode(6)
root.left.right = TreeNode(2)
root.right.left = TreeNode(0)
root.right.right = TreeNode(8)
root.left.right.left = TreeNode(7)
root.left.right.right = TreeNode(4)

node1 = 5
node2 = 1
lca = find_lca(root, node1, node2)

print("Lowest Common Ancestor of", node1, "and", node2, "is:", lca.key)
```

In this example, the tree looks like:

```
        3
       / \
      5   1
     / \ / \
    6  2 0  8
      / \
     7   4
```

The output will be:

```
Lowest Common Ancestor of 5 and 1 is: 3
```

You can adjust the `TreeNode` class and tree structure based on your specific use case.
